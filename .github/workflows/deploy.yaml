name: Deploy Java App to EC2

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean package --file pom.xml

      - name: Copy files to EC2 with scp
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "target/todo-0.0.1-app.jar"
          target: "/home/${{ vars.EC2_USER }}/team_one/"
          rm: true

      - name: Run remote commands on EC2 and configure Nginx + systemd
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e
            APP_DIR="/home/${{ vars.EC2_USER }}/team_one"
            JAR_NAME="todo-0.0.1-app.jar"
            SERVICE_NAME="team_one"
            
            echo "--- Preparing Java App in $APP_DIR ---"
            mkdir -p "$APP_DIR"
            
            echo "--- Installing Java 21 (Amazon Corretto) ---"
            sudo dnf install -y java-21-amazon-corretto
            
            echo "--- Writing environment variables to .env ---"
            cat <<EOF > "$APP_DIR/.env"
            SPRING_DATASOURCE_URL=jdbc:postgresql://${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}
            SPRING_DATASOURCE_USERNAME=${{ vars.DB_USER }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            SPRING_APPLICATION_NAME=${{vars.APPLICATION_NAME}}
            SPRING_DATA_REST_BASE_PATH=${{vars.REST_BASE_PATH}}
            API_BASEURL=${{vars.EC2_HOST}}${{vars.REST_BASE_PATH}}
            EOF
            
            chmod 600 "$APP_DIR/.env"
            
            echo "--- Creating systemd service for $SERVICE_NAME ---"
            sudo bash -c "cat > /etc/systemd/system/$SERVICE_NAME.service" <<EOF
            [Unit]
            Description=team_one Java Backend
            After=network.target
            
            [Service]
            User=${{ vars.EC2_USER }}
            WorkingDirectory=$APP_DIR
            EnvironmentFile=$APP_DIR/.env
            ExecStart=/usr/bin/java -jar target/$JAR_NAME
            Restart=on-failure
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            echo "--- Reloading systemd and starting service ---"
            sudo systemctl daemon-reexec
            sudo systemctl daemon-reload
            sudo systemctl enable $SERVICE_NAME
            sudo systemctl restart $SERVICE_NAME
            
            echo "--- Installing and configuring NGINX and Certbot ---"
            if ! command -v nginx &> /dev/null; then
              sudo dnf install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            fi
            
            if ! command -v certbot &> /dev/null; then
              echo "--- Installing Certbot via pip ---"
              sudo dnf install -y python3-pip python3-devel
              sudo python3 -m pip install certbot certbot-nginx
            fi
            
            echo "--- Creating temporary Nginx config for Certbot ---"
            NGINX_TEMP_CONF="/etc/nginx/conf.d/team_one_temp.conf"
            sudo bash -c "cat > $NGINX_TEMP_CONF" <<EOF
            server {
                listen 80;
                listen [::]:80;
                server_name ${{ vars.DOMAIN_NAME }};
            
                location / {
                    root /var/www/html;
                    try_files \$uri \$uri/ =404;
                }
            }
            EOF
            
            echo "--- Setting permissions for temporary config ---"
            sudo chmod 644 "$NGINX_TEMP_CONF"
            sudo chown nginx:nginx "$NGINX_TEMP_CONF"
            
            echo "--- Verifying temporary Nginx config ---"
            if ! sudo nginx -t; then
              echo "Error: Temporary Nginx configuration test failed."
              cat "$NGINX_TEMP_CONF"
              exit 1
            fi
            sudo systemctl restart nginx || {
              echo "Error: Failed to restart Nginx."
              sudo systemctl status nginx
              exit 1
            }
            
            echo "--- Debugging: Checking Nginx server blocks ---"
            sudo nginx -T | grep server_name
            
            echo "--- Debugging: Checking if port 80 is open ---"
            sudo netstat -tuln | grep :80 || echo "Port 80 not open"
            
            echo "--- Obtaining SSL certificate with Certbot ---"
            if [ ! -d "/etc/letsencrypt/live/${{ vars.DOMAIN_NAME }}" ]; then
              sudo certbot --nginx --config-dir /etc/letsencrypt --work-dir /var/lib/letsencrypt --logs-dir /var/log/letsencrypt -d ${{ vars.DOMAIN_NAME }} --non-interactive --agree-tos --email admin@${{ vars.DOMAIN_NAME }} -v || {
                echo "Error: Certbot failed to obtain certificate."
                sudo cat /var/log/letsencrypt/letsencrypt.log
                exit 1
              }
            else
              echo "SSL certificate already exists for ${{ vars.DOMAIN_NAME }}"
            fi
            
            echo "--- Removing temporary Nginx config ---"
            sudo rm -f "$NGINX_TEMP_CONF"
            
            echo "Configuring 'server_names_hash_bucket_size'..."
            if ! grep -q "server_names_hash_bucket_size" /etc/nginx/nginx.conf; then
              sudo sed -i '/http {/a \    server_names_hash_bucket_size 128;' /etc/nginx/nginx.conf
            else
              sudo sed -i 's/^\(\s*\)#\?\s*server_names_hash_bucket_size.*/\1server_names_hash_bucket_size 128;/' /etc/nginx/nginx.conf
            fi
            
            NGINX_CONF="/etc/nginx/conf.d/team_one.conf"
            echo "Creating final Nginx config file: $NGINX_CONF"
            sudo bash -c "cat > $NGINX_CONF" <<EOF
            # HTTP server block (redirects to HTTPS)
            server {
                listen 80;
                listen [::]:80;
                server_name ${{ vars.DOMAIN_NAME }};
            
                # Redirect all HTTP traffic to HTTPS
                return 301 https://${{ vars.DOMAIN_NAME }}\$request_uri;
            }
            
            # HTTPS server block
            server {
                listen 443 ssl;
                listen [::]:443 ssl;
                server_name ${{ vars.DOMAIN_NAME }};
            
                # SSL certificate paths
                ssl_certificate /etc/letsencrypt/live/${{ vars.DOMAIN_NAME }}/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/${{ vars.DOMAIN_NAME }}/privkey.pem;
            
                # SSL security settings
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
            
                location / {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
            
            echo "--- Setting permissions for final config ---"
            sudo chmod 644 "$NGINX_CONF"
            sudo chown nginx:nginx "$NGINX_CONF"
            
            echo "--- Testing and restarting Nginx for final config ---"
            if ! sudo nginx -t; then
              echo "Error: Final Nginx configuration test failed."
              cat "$NGINX_CONF"
              exit 1
            fi
            sudo systemctl restart nginx || {
              echo "Error: Failed to restart Nginx."
              sudo systemctl status nginx
              exit 1
            }
            
            echo "--- Debugging: Checking Java app response ---"
            curl -v http://localhost:8080 || echo "Java app not responding"
            
            echo "âœ… Deployment complete. Java app is running under systemd and accessible via NGINX with HTTPS."
